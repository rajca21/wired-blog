const posts = [
  {
    title:
      'Regexes Got Good: The History And Future Of Regular Expressions In JavaScript',
    content:
      '<p><em style="background-color: rgb(255, 255, 255); color: rgb(102, 102, 102);">Although JavaScript regexes used to be underpowered compared to other modern flavors, numerous improvements in recent years mean that\'s no longer true. Steven Levithan evaluates the history and present state of regular expressions in JavaScript with tips to make your regexes more readable, maintainable, and resilient.</em></p><p><br></p><p>Modern JavaScript regular expressions have come a long way compared to what you might be familiar with. Regexes can be&nbsp;<strong>an amazing tool for searching and replacing text</strong>, but they have a longstanding reputation (perhaps outdated, as I\'ll show) for being difficult to write and understand.</p><p><br></p><p>This is especially true in JavaScript-land, where regexes languished for many years, comparatively underpowered compared to their more modern counterparts in PCRE, Perl, .NET, Java, Ruby, C++, and Python. Those days are over.</p><p>In this article, I\'ll recount the history of improvements to JavaScript regexes (spoiler: ES2018 and ES2024 changed the game), show examples of modern regex features in action, introduce you to a lightweight&nbsp;<a href="https://github.com/slevithan/regex" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">JavaScript library</a>&nbsp;that makes JavaScript stand alongside or surpass other modern regex flavors, and end with a preview of active proposals that will continue to improve regexes in future versions of JavaScript (with some of them already working in your browser today).</p><p><br></p><h2>The History of Regular Expressions in JavaScript&nbsp;</h2><p><br></p><p>ECMAScript 3, standardized in 1999, introduced Perl-inspired regular expressions to the JavaScript language. Although it got enough things right to make regexes pretty useful (and mostly compatible with other Perl-inspired flavors), there were some big omissions, even then. And while JavaScript waited 10 years for its next standardized version with ES5, other programming languages and regex implementations added useful new features that made their regexes more powerful and readable.</p><p>But that was then.</p><p><br></p><p>Let\'s take a look at them.</p><p>Don\'t worry if it\'s hard to understand what some of the following features mean — we\'ll look more closely at several of the key features afterward.</p><p><br></p><ul><li>ES5 (2009) fixed unintuitive behavior by creating a new object every time regex literals are evaluated and allowed regex literals to use unescaped forward slashes within character classes (<code style="background-color: rgb(255, 242, 234);">/[/]/</code>).</li><li>ES6/ES2015 added two new regex flags:&nbsp;<code style="background-color: rgb(255, 242, 234);">y</code>&nbsp;(<code style="background-color: rgb(255, 242, 234);">sticky</code>), which made it easier to use regexes in parsers, and&nbsp;<code style="background-color: rgb(255, 242, 234);">u</code>&nbsp;(<code style="background-color: rgb(255, 242, 234);">unicode</code>), which added several significant Unicode-related improvements along with strict errors. It also added the&nbsp;<code style="background-color: rgb(255, 242, 234);">RegExp.prototype.flags</code>&nbsp;getter, support for subclassing&nbsp;<code style="background-color: rgb(255, 242, 234);">RegExp</code>, and the ability to copy a regex while changing its flags.</li><li>ES2018 was the edition that finally made JavaScript regexes pretty good. It added the&nbsp;<code style="background-color: rgb(255, 242, 234);">s</code>&nbsp;(<code style="background-color: rgb(255, 242, 234);">dotAll</code>) flag, lookbehind, named capture, and Unicode properties (via&nbsp;<code style="background-color: rgb(255, 242, 234);">p{...}</code>&nbsp;and&nbsp;<code style="background-color: rgb(255, 242, 234);">P{...}</code>, which require ES6\'s flag&nbsp;<code style="background-color: rgb(255, 242, 234);">u</code>). All of these are extremely useful features, as we\'ll see.</li><li>ES2020 added the string method&nbsp;<code style="background-color: rgb(255, 242, 234);">matchAll</code>, which we\'ll also see more of shortly.</li><li>ES2022 added flag&nbsp;<code style="background-color: rgb(255, 242, 234);">d</code>&nbsp;(<code style="background-color: rgb(255, 242, 234);">hasIndices</code>), which provides start and end indices for matched substrings.</li><li>And finally, ES2024 added flag&nbsp;<code style="background-color: rgb(255, 242, 234);">v</code>&nbsp;(<code style="background-color: rgb(255, 242, 234);">unicodeSets</code>) as an upgrade to ES6\'s flag&nbsp;<code style="background-color: rgb(255, 242, 234);">u</code>. The&nbsp;<code style="background-color: rgb(255, 242, 234);">v</code>&nbsp;flag adds a set of multicharacter “properties of strings” to&nbsp;<code style="background-color: rgb(255, 242, 234);">p{...}</code>, multicharacter elements within character classes via&nbsp;<code style="background-color: rgb(255, 242, 234);">p{...}</code>&nbsp;and&nbsp;<code style="background-color: rgb(255, 242, 234);">q{...}</code>, nested character classes, set subtraction&nbsp;<code style="background-color: rgb(255, 242, 234);">[A--B]</code>&nbsp;and intersection&nbsp;<code style="background-color: rgb(255, 242, 234);">[A&amp;&amp;B]</code>, and different escaping rules within character classes. It also fixed case-insensitive matching for Unicode properties within negated sets&nbsp;<code style="background-color: rgb(255, 242, 234);">[^...]</code>.</li></ul><p><br></p>',
    author: 'admin',
    category: 'JavaScript',
    image:
      'https://coderpad.io/wp-content/uploads/2022/04/coderpad-regex-the-complete-guide.jpg',
    slug: 'history-future-regular-expressions-javascript',
  },
  {
    title: 'The Era Of Platform Primitives Is Finally Here',
    content:
      '<p><em style="background-color: rgb(255, 255, 255); color: rgb(102, 102, 102);">Application frameworks have built whole ecosystems on top of them. Let\'s take a closer look at serverless platforms such as Netlify\'s&nbsp;</em><a href="https://www.netlify.com/platform/primitives" rel="noopener noreferrer" target="_blank" style="background-color: rgb(255, 255, 255); color: rgb(0, 111, 198);"><em>Platform Primitives</em></a><em style="background-color: rgb(255, 255, 255); color: rgb(102, 102, 102);">&nbsp;and explore how they can increase our productivity with a serverless fullstack experience.</em></p><p><br></p><p>This article has been kindly supported by our dear friends at&nbsp;<a href="https://www.netlify.com/" rel="noopener noreferrer" target="_blank" style="color: var(--accent-primary-color,#6fd2ff); background-color: transparent;">Netlify</a>, who are a diverse group of incredible talent from all over the world and offers a platform for web developers that multiplies productivity.&nbsp;<em>Thank you!</em></p><p><br></p><p>In the past, the web ecosystem moved at a very slow pace. Developers would go years without a new language feature or working around a weird browser quirk. This pushed our technical leaders to come up with creative solutions to circumvent the platform\'s shortcomings. We invented bundling, polyfills, and transformation steps to make things work everywhere with less of a hassle.</p><p>Slowly, we moved towards some sort of consensus on what we need as an ecosystem. We now have TypeScript and Vite as clear preferences—pushing the needle of what it means to build consistent experiences for the web. Application frameworks have built whole ecosystems on top of them:&nbsp;<a href="https://docs.solidjs.com/solid-start" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">SolidStart</a>,&nbsp;<a href="https://nuxtjs.org/" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">Nuxt</a>,&nbsp;<a href="https://remix.run/" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">Remix</a>, and&nbsp;<a href="https://analogjs.org/" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">Analog</a>&nbsp;are examples of incredible tools built with such primitives. We can say that Vite and TypeScript are tooling primitives that empower the creation of others in diverse ecosystems.</p><p>With bundling and transformation needs somewhat defined, it was only natural that framework authors would move their gaze to the next layer they needed to abstract: the server.</p><p><br></p><h2>Server Primitives&nbsp;<a href="https://www.smashingmagazine.com/2024/05/netlify-platform-primitives/#server-primitives" rel="noopener noreferrer" target="_blank" style="color: rgb(118, 118, 118); background-color: transparent;">#</a></h2><p><br></p><p>The UnJS folks have been consistently building agnostic tooling that can be reused in different ecosystems. Thanks to them, we now have frameworks and libraries such as&nbsp;<a href="https://h3.unjs.io/" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">H3</a>&nbsp;(a minimal Node.js server framework built with TypeScript), which enables&nbsp;<a href="https://nitro.unjs.io/" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">Nitro</a>&nbsp;(a whole server runtime powered by&nbsp;<a href="https://vite.dev/" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">Vite</a>, and&nbsp;<a href="https://h3.unjs.io/" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">H3</a>), that in its own turn enabled Vinxi (an application bundler and server runtime that abstracts Nitro and Vite).</p><p><a href="https://nitro.unjs.io/" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">Nitro</a>&nbsp;is used already by three major frameworks:&nbsp;<a href="https://nuxtjs.org/" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">Nuxt</a>,&nbsp;<a href="https://analogjs.org/" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">Analog</a>, and&nbsp;<a href="https://docs.solidjs.com/solid-start" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">SolidStart</a>. While Vinxi is also used by SolidStart. This means that any platform which supports one of these, will definitely be able to support the others with&nbsp;<strong>zero additional effort</strong>.</p><blockquote><em>This is not about taking a bigger slice of the cake. But making the cake bigger for everyone.</em></blockquote><p>Frameworks, platforms, developers, and users benefit from it. We bet on our ecosystem together instead of working in silos with our monolithic solutions. Empowering our developer-users to gain transferable skills and truly choose the best tool for the job with&nbsp;<strong>less vendor lock-in than ever before</strong>.</p><p><br></p><h2>Serverless Rejoins Conversation&nbsp;<a href="https://www.smashingmagazine.com/2024/05/netlify-platform-primitives/#serverless-rejoins-conversation" rel="noopener noreferrer" target="_blank" style="color: rgb(118, 118, 118); background-color: transparent;">#</a></h2><p><br></p><p>Such initiatives have probably been noticed by serverless platforms like Netlify. With&nbsp;<a href="https://www.netlify.com/platform/primitives" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">Platform Primitives</a>, frameworks can leverage agnostic solutions for common necessities such as Incremental Static Regeneration (ISR), Image Optimization, and key/value (<code style="background-color: rgb(255, 242, 234);">kv</code>) storage.</p><p>As the name implies,&nbsp;<strong>Netlify Platform Primitives</strong>&nbsp;are a group of abstractions and helpers made available at a platform level for either frameworks or developers to leverage when using their applications. This brings additional functionality simultaneously to every framework. This is a big and powerful shift because, up until now, each framework would have to create its own solutions and backport such strategies to compatibility layers within each platform.</p><p>Moreover, developers would have to wait for a feature to first land on a framework and subsequently for support to arrive in their platform of choice. Now, as long as they\'re using Netlify, those primitives are available directly without any effort and time put in by the framework authors. This empowers every ecosystem in a single measure.</p><p><br></p><blockquote><em>Serverless means server infrastructure developers don\'t need to handle. It\'s not a misnomer, but a format of&nbsp;</em><strong><em>Infrastructure As A Service</em></strong><em>.</em></blockquote><p>As mentioned before,&nbsp;<a href="https://www.netlify.com/platform/primitives" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">Netlify Platform Primitives</a>&nbsp;are three different features:</p><ol><li><strong>Image CDN</strong></li><li>A&nbsp;<a href="https://www.netlify.com/blog/netlify-image-cdn-seamlessly-resize-crop-and-deliver-optimized-media-globally" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">content delivery network</a>&nbsp;for images. It can handle format transformation and size optimization via URL query strings.</li><li><strong>Caching</strong></li><li>Basic primitives for their server runtime that help manage the caching directives for browser, server, and CDN runtimes smoothly.</li><li><strong>Blobs</strong></li><li>A key/value (KV) storage option is automatically available to your project through their SDK.</li></ol><p>Let\'s take a quick dive into each of these features and explore how they can increase our productivity with a serverless fullstack experience.</p><p><br></p><h3>Image CDN&nbsp;<a href="https://www.smashingmagazine.com/2024/05/netlify-platform-primitives/#image-cdn" rel="noopener noreferrer" target="_blank" style="color: rgb(118, 118, 118); background-color: transparent;">#</a></h3><p><br></p><p>Every image in a&nbsp;<code style="background-color: rgb(255, 242, 234);">/public</code>&nbsp;can be served through a Netlify function. This means it\'s possible to access it through a&nbsp;<code style="background-color: rgb(255, 242, 234);">/.netlify/images</code>&nbsp;path. So, without adding&nbsp;<a href="https://www.npmjs.com/package/sharp" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">sharp</a>&nbsp;or any image optimization package to your stack, deploying to&nbsp;<a href="https://www.netlify.com/platform" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">Netlify</a>&nbsp;allows us to serve our users with a better format without transforming assets at build-time. In a&nbsp;<a href="https://docs.solidjs.com/solid-start" rel="noopener noreferrer" target="_blank" style="color: rgb(0, 111, 198); background-color: transparent;">SolidStart</a>, in a few lines of code, we could have an Image component that transforms other formats to&nbsp;<code style="background-color: rgb(255, 242, 234);">.webp</code>.</p><p><br></p><pre class="ql-syntax" spellcheck="false">import { type JSX } from "solid-js"; const SITE_URL = "https://example.com"; interface Props extends JSX.ImgHTMLAttributes&lt;HTMLImageElement&gt; { format?: "webp" | "jpeg" | "png" | "avif" | "preserve"; quality?: number | "preserve"; } const getQuality = (quality: Props["quality"]) =&gt; { if (quality === "preserve") return""; return `&amp;q=${quality || "75"}`; }; function getFormat(format: Props["format"]) { switch (format) { case "preserve": return" "; case "jpeg": return `&amp;fm=jpeg`; case "png": return `&amp;fm=png`; case "avif": return `&amp;fm=avif`; case "webp": default: return `&amp;fm=webp`; } } export function Image(props: Props) { return ( &lt;img {...props} src={`${SITE_URL}/.netlify/images?url=/${props.src}${getFormat( props.format )}${getQuality(props.quality)}`} /&gt; ); }</pre><p><br></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);">Notice the above component is even slightly more complex than bare essentials because we\'re enforcing some default optimizations. Our&nbsp;</span><code style="background-color: rgb(255, 242, 234); color: rgb(51, 51, 51);">getFormat</code><span style="background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);">&nbsp;method transforms images to&nbsp;</span><code style="background-color: rgb(255, 242, 234); color: rgb(51, 51, 51);">.webp</code><span style="background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);">&nbsp;by default. It\'s a broadly supported format that\'s significantly smaller than the most common and without any loss in quality. Our&nbsp;</span><code style="background-color: rgb(255, 242, 234); color: rgb(51, 51, 51);">get quality</code><span style="background-color: rgb(255, 255, 255); color: rgb(51, 51, 51);">&nbsp;function reduces the image quality to 75% by default; as a rule of thumb, there isn\'t any perceivable loss in quality for large images while still providing a significant size optimization.</span></p><p><br></p><h3>Caching&nbsp;<a href="https://www.smashingmagazine.com/2024/05/netlify-platform-primitives/#caching" rel="noopener noreferrer" target="_blank" style="color: rgb(118, 118, 118); background-color: transparent;">#</a></h3><p>By default, Netlify caching is quite extensive for your regular artifacts - unless there\'s a new deployment or the cache is flushed manually, resources will last for 365 days. However, because server/edge functions are dynamic in nature, there\'s no default caching to prevent serving stale content to end-users. This means that if you have one of these functions in production, chances are there\'s some caching to be leveraged to reduce processing time (and expenses).</p><p>By adding a cache-control header, you already have done 80% of the work in optimizing your resources for best serving users. Some commonly used cache control directives:</p><pre class="ql-syntax" spellcheck="false">{ "cache-control": "public, max-age=0, stale-while-revalidate=86400" }</pre><p><strong>Copy</strong></p><ul><li><code style="background-color: rgb(255, 242, 234);">public</code>: Store in a shared cache.</li><li><code style="background-color: rgb(255, 242, 234);">max-age=0</code>: resource is immediately stale.</li><li><code style="background-color: rgb(255, 242, 234);">stale-while-revalidate=86400</code>: if the cache is stale for less than 1 day, return the cached value and revalidate it in the background.</li></ul><pre class="ql-syntax" spellcheck="false">{ "cache-control": "public, max-age=86400, must-revalidate" } </pre><p><strong>Copy</strong></p><ul><li><code style="background-color: rgb(255, 242, 234);">public</code>: Store in a shared cache.</li><li><code style="background-color: rgb(255, 242, 234);">max-age=86400</code>: resource is fresh for one day.</li><li><code style="background-color: rgb(255, 242, 234);">must-revalidate</code>: if a request arrives when the resource is already stale, the cache must be revalidated before a response is sent to the user.</li></ul><p><br></p>',
    author: 'editor',
    category: 'JavaScript',
    image: 'https://og.daily.dev/api/posts/Z4Eh65fRb',
    slug: 'netlify-platform-primitive',
  },
  {
    title: 'A Recap of the Data Engineering Open Forum at Netflix',
    content:
      '<p>At Netflix, we aspire to entertain the world, and our data engineering teams play a crucial role in this mission by enabling data-driven decision-making at scale. Netflix is not the only place where data engineers are solving challenging problems with creative solutions. On April 18th, 2024, we hosted the inaugural Data Engineering Open Forum at our Los Gatos office, bringing together data engineers from various industries to share, learn, and connect.</p><p><br></p><p>At the conference, our speakers share their unique perspectives on modern developments, immediate challenges, and future prospects of data engineering. We are excited to share the recordings of talks from the conference with the rest of the world.</p><p><br></p><h2>Evolving from Rule-based Classifier: Machine Learning Powered Auto Remediation in Netflix Data Platform</h2><p><br></p><p><a href="https://youtu.be/0j6b9V9tmKA?si=fMEuLmrIK5ATi52d" rel="noopener noreferrer" target="_blank" style="color: inherit;"><strong>Recording</strong></a></p><p><br></p><p><strong>Speakers:</strong></p><ul><li><a href="https://www.linkedin.com/in/stephanievezich/" rel="noopener noreferrer" target="_blank" style="color: inherit;">Stephanie Vezich Tamayo</a>&nbsp;(Senior Machine Learning Engineer at Netflix)</li><li><a href="https://www.linkedin.com/in/binbing-hou/" rel="noopener noreferrer" target="_blank" style="color: inherit;">Binbing Hou</a>&nbsp;(Senior Software Engineer at Netflix)</li></ul><p><strong>Summary</strong>: At Netflix, hundreds of thousands of workflows and millions of jobs are running every day on our big data platform, but diagnosing and remediating job failures can impose considerable operational burdens. To handle errors efficiently, Netflix developed a rule-based classifier for error classification called “Pensive.” However, as the system has increased in scale and complexity, Pensive has been facing challenges due to its limited support for operational automation, especially for handling memory configuration errors and unclassified errors. To address these challenges, we have developed a new feature called “Auto Remediation,” which integrates the rules-based classifier with an ML service.</p><p><br></p><h2>Automating the Data Architect: Generative AI for Enterprise Data Modeling</h2><p><br></p><p><a href="https://youtu.be/DtzIIVJq8wA?si=i5fLXA7G8IMyiF0u" rel="noopener noreferrer" target="_blank" style="color: inherit;"><strong>Recording</strong></a></p><p><br></p><p><strong>Speaker</strong>:&nbsp;<a href="https://www.linkedin.com/in/jide-o-87602512/" rel="noopener noreferrer" target="_blank" style="color: inherit;">Jide Ogunjobi</a>&nbsp;(Founder &amp; CTO at Context Data)</p><p><strong>Summary</strong>: As organizations accumulate ever-larger stores of data across disparate systems, efficiently querying and gaining insights from enterprise data remain ongoing challenges. To address this, we propose developing an intelligent agent that can automatically discover, map, and query all data within an enterprise. This “Enterprise Data Model/Architect Agent” employs generative AI techniques for autonomous enterprise data modeling and architecture.</p><p><br></p><h2>Real-Time Delivery of Impressions at Scale</h2><p><br></p><p><a href="https://youtu.be/ARTHgxoJmCE?si=MDx1Qa8W7nNxkA_m" rel="noopener noreferrer" target="_blank" style="color: inherit;"><strong>Recording</strong></a></p><p><br></p><p><strong>Speaker:</strong>&nbsp;<a href="https://www.linkedin.com/in/tulikabhatt/" rel="noopener noreferrer" target="_blank" style="color: inherit;">Tulika Bhatt</a>&nbsp;(Senior Data Engineer at Netflix)</p><p><strong>Summary</strong>: Netflix generates approximately 18 billion impressions daily. These impressions significantly influence a viewer\'s browsing experience, as they are essential for powering video ranker algorithms and computing adaptive pages, With the evolution of user interfaces to be more responsive to in-session interactions, coupled with the growing demand for real-time adaptive recommendations, it has become highly imperative that these impressions are provided on a near real-time basis. This talk will delve into the creative solutions Netflix deploys to manage this high-volume, real-time data requirement while balancing scalability and cost.</p>',
    author: 'admin',
    category: 'Data Engineering',
    image:
      'https://miro.medium.com/v2/resize:fit:720/format:webp/0*k1mwTj0BpJuP0TDi',
    slug: 'netflix-data-engineering',
  },
  {
    title: "Meta's approach to machine learning prediction robustness",
    content:
      '<p><span style="background-color: rgb(255, 255, 255); color: rgb(103, 120, 138);">Meta\'s advertising business leverages large-scale machine learning (ML) recommendation models that power millions of ads recommendations per second across Meta\'s family of apps. Maintaining reliability of these ML systems helps&nbsp;ensure the highest&nbsp;level of service and uninterrupted benefit delivery to our users and advertisers. To minimize disruptions and ensure our ML systems are intrinsically resilient, we have built a comprehensive set of&nbsp;</span><strong style="background-color: rgb(255, 255, 255); color: rgb(103, 120, 138);">prediction robustness</strong><span style="background-color: rgb(255, 255, 255); color: rgb(103, 120, 138);">&nbsp;solutions that ensure stability without compromising performance or availability of our ML systems.&nbsp;</span></p><p><br></p><h2>Why is machine learning robustness difficult?</h2><p>Solving for ML prediction stability has many unique characteristics, making it more complex than addressing stability challenges for traditional online services:&nbsp;</p><p><br></p><ul><li><strong>ML models are stochastic by nature.</strong>&nbsp;Prediction uncertainty is inherent, which makes it difficult to define, identify, diagnose, reproduce, and debug prediction quality issues.&nbsp;</li><li><strong>Constant and frequent refreshing of models and features.</strong>&nbsp;ML models and features are continuously updated to learn from and reflect people\'s interests, which makes it challenging to locate prediction quality issues, contain their impact, and quickly resolve them</li><li><strong>Blurred line between reliability and performance.&nbsp;</strong>In traditional online services, reliability issues are easier to detect based on service metrics such as latency and availability. However, ML prediction stability implies a consistent prediction quality shift, which is harder to distinguish. For example, an “available” ML recommender system that reliably produces inaccurate predictions is actually “unreliable.”</li><li><strong>Cumulative effect of small distribution shifts over time.</strong>&nbsp;Due to the stochastic nature of ML models, small regressions in prediction quality are hard to distinguish from the anticipated organic traffic-pattern changes. However, if undetected, such small prediction regressions could have a significant cumulative negative impact over time.&nbsp;</li><li><strong>Long chain of complex interactions.</strong>&nbsp;The final ML prediction result is derived from a complex chain of processing and propagation across multiple ML systems. Regression in prediction quality could be traced back to several hops upstream in the chain, making it hard to diagnose and locate stability improvements per specific ML system.&nbsp;</li><li><strong>Small fluctuations can amplify to become big impacts.</strong>&nbsp;Even small changes in the input data (e.g., features, training data, and model hyperparameters) can have a significant and unpredictable impact on the final predictions. This poses a major challenge in containing prediction quality issues at particular ML artifacts (model, feature, label), and it requires end-to-end global protection.&nbsp;</li><li><strong>Rising complexity with rapid modeling innovations.</strong>&nbsp;Meta\'s ML technologies are<a href="https://ai.meta.com/blog/meta-llama-3/" rel="noopener noreferrer" target="_blank" style="background-color: transparent; color: rgb(0, 98, 154);">&nbsp;evolving rapidly</a>, with increasingly larger and more complex models and&nbsp;<a href="https://engineering.fb.com/2024/03/12/data-center-engineering/building-metas-genai-infrastructure/" rel="noopener noreferrer" target="_blank" style="background-color: transparent; color: rgb(0, 98, 154);">new system architectures</a>. This requires prediction robustness solutions to evolve at the same fast pace.&nbsp;</li></ul><p><br></p><h2>Meta\'s approach and progress towards prediction robustness</h2><p><br></p><p>Meta has developed a systematic framework to build prediction robustness. This framework includes a set of&nbsp;<strong>prevention guardrails</strong>&nbsp;to build control from outside-in,&nbsp;<strong>fundamental understanding</strong>&nbsp;of the issues to gain ML insights, and a set of technical fortifications to establish&nbsp;<strong>intrinsic robustness</strong>.&nbsp;</p><p>These three approaches are exercised across models, features, training data, calibration, and interpretability to ensure all possible issues are covered throughout the ML ecosystem.&nbsp;With prediction robustness, Meta\'s ML systems are robust by design, and any stability issues are actively monitored and resolved to ensure smooth ads delivery for our users and advertisers.&nbsp;</p><p><br></p><p>Our prediction robustness solution systematically covers all areas of the recommender system training data, features, models, calibration, and interpretability.&nbsp;</p><p><br></p><h3>Model robustness</h3><p><br></p><p>Model robustness challenges include model snapshot quality, model snapshot freshness, and inferencing availability. We use Snapshot Validator, an internal-only real-time, scalable, and low-latency model evaluation system, as the&nbsp;prevention guardrail&nbsp;on the quality of every single model snapshot, before it ever serves production traffic.&nbsp;</p><p>Snapshot Validator runs evaluations with holdout datasets on newly-published model snapshots in real-time, and it determines whether the new snapshot can serve production traffic. Snapshot Validator has reduced model snapshot corruption by 74% in the past two years. It has protected &gt;90% of Meta ads ranking models in production without prolonging Meta\'s real-time model refresh.&nbsp;</p><p>In addition, Meta engineers built new ML techniques to improve the&nbsp;intrinsic robustness of models, such as pruning less-useful modules inside models, better model generalization against overfitting, more effective quantization algorithms, and ensuring model resilience in performance even with a small amount of input data anomalies. Together these techniques have improved the ads ML model stability, making the models resilient against overfitting, loss divergence, and more.&nbsp;</p><p>&nbsp;</p><h3>Feature robustness</h3><p><br></p><p>Feature robustness focuses on guaranteeing the quality of ML features across coverage, data distribution, freshness, and training-inference consistency. As prevention guardrails, robust feature monitoring systems were in production to continuously detect anomalies on ML features. As the ML-feature-value distributions can change widely with non-deterministics sways on model performance, the anomaly detection systems have turned to accommodate the particular traffic and ML prediction patterns for accuracy.&nbsp;</p><p>Upon detection, automated preventive measures will kick in to ensure abnormal features are not used in production. Furthermore, a real-time feature importance evaluation system is built to provide fundamental understanding of the correlation between feature quality and model prediction quality.&nbsp;</p><p>All these solutions have effectively contained ML feature issues on coverage drop, data corruption, and inconsistency in Meta.&nbsp;</p><h3>Training data robustness</h3><p>The wide spectrum of Meta ads products requires distinct labeling logics for model training, which significantly increases the complexity of labeling. In addition, the data sources for label calculation could be unstable, due to the complicated logging infrastructure and the organic traffic drifts. Dedicated training-data-quality systems were built as the prevention guardrails to detect label drifts over time with high accuracy, and swiftly and automatically mitigate the abnormal data changes and prevent models from learning the affected training data.&nbsp;</p><p>Additionally, fundamental understanding of training data label consistency has resulted in optimizations in training data generation for better model learning.&nbsp;</p><p><br></p><h3>Calibration robustness</h3><p><br></p><p>Calibration robustness builds real-time monitoring and auto-mitigation toolsets to guarantee that the final prediction is well calibrated, which is vital for advertiser experiences. The calibration mechanism is technically unique because it is unjoined-data real-time model training, and it is more sensitive to traffic distribution shifts than the joined-data mechanism.&nbsp;</p><p>To improve the stability and accuracy of calibration Meta has built prevention guardrails that consist of high-precision alert systems to minimize problem-detection time, as well as high-rigor, automatically orchestrated mitigations to minimize problem-mitigation time.</p><h3>ML interpretability</h3><p>ML interpretability focuses on identifying the root causes of all ML instability issues.&nbsp;<a href="https://engineering.fb.com/2023/12/19/data-infrastructure/hawkeye-ai-debugging-meta/" rel="noopener noreferrer" target="_blank" style="background-color: transparent; color: rgb(0, 98, 154);">Hawkeye</a>, our internal AI debugging toolkit, allows engineers at Meta to root-cause tricky ML prediction problems. Hawkeye is an end-to-end and streamlined diagnostic experience covering all ML artifacts at Meta, and it has covered &gt;80% of ads ML artifacts. It is now one of the most widely used tools in the Meta ML engineering community.&nbsp;</p><p>Beyond debugging, ML interpretability invests heavily in model internal state understanding –&nbsp;one of the most complex and technically challenging areas in the realm of ML stability. There are no standardized solutions to this challenge, but Meta uses model graph tracing, which&nbsp;uses model internal states on model activations and neuron importance, to accurately explain why models get corrupted.&nbsp;</p><p>Altogether, advancements in ML Interpretability have reduced the time to root-cause ML prediction issues by 50%, and have significantly boosted the&nbsp;fundamental understanding of model behaviors.&nbsp;</p><p><br></p><h2>Improving ranking and productivity with prediction robustness</h2><p><br></p><p>Going forward, we\'ll be extending our prediction robustness solutions to improve ML ranking performance, and boost engineering productivity by accelerating ML developments.</p><p>Prediction robustness techniques can boost ML performance by making models more robust intrinsically, with more stable training, less normalized entropy explosion or loss divergence, more resilience to data shift, and stronger generalizability. We\'ve seen performance gains from applying robustness techniques like gradient clipping and more robust quantization algorithms. And we will continue to identify more systematic improvement opportunities with model understanding techniques.</p><p>In addition, model performance will be improved with less staleness and stronger consistency between serving and training environments across labels, features, inference platform, and more. We plan to continue upgrading Meta\'s ads ML services with stronger guarantees of training-serving consistency and more aggressive staleness SLAs.&nbsp;</p><p>Regarding ML development productivity, prediction robustness techniques can facilitate model development, and improve daily operations by reducing the time needed to address ML prediction stability issues. We\'re currently building an intelligent ML diagnostic platform that will leverage the latest ML technologies, in the context of prediction robustness, to help even engineers with little ML knowledge locate the root cause of ML stability issues within minutes.&nbsp;</p><p>The platform will also evaluate reliability risk continuously across the development lifecycle, minimizing delays in ML development due to reliability regressions. It will embed reliability into every ML development stage, from idea exploration all the way to online experimentation and final launches.&nbsp;</p>',
    author: 'admin',
    category: 'Machine Learning',
    image:
      'https://engineering.fb.com/wp-content/uploads/2022/07/Eng-Blog-Self-Serve-Hero-Images-DEBUGGING-203-Teale-1.jpg',
    slug: 'data-infrastructure-machine-learning-ml-prediction-robustness-meta',
  },
  {
    title: 'TypeScript Generics - a cheat sheet',
    content:
      "<p>Generics in TypeScript can seem daunting at first - what's with all those capital letters and square brackets? </p><p>But don't worry, this cheat sheet helps demystify Generics and show you how they work with simple examples.</p><p><br></p><h2>How Generics Works</h2><p>Generics enable you to define a type variable that serves as a placeholder for a specific type to be provided later. This is the core strength of Generics: they allow you to define flexible, reusable types without sacrificing type safety.</p><p>The letter T is commonly used by convention to represent a generic type variable, but you can use any letter or descriptive name that fits your context (other commonly used letters include U, V, K).</p><p><br></p><h2>Usage examples</h2><p>Below are some practical examples that demonstrate how Generics work.</p><p>You can play with the examples below in this",
    author: 'editor',
    category: 'TypeScript',
    image:
      'https://codecarbon.com/wp-content/uploads/2020/11/TypeScript-4.1-release.jpg',
    slug: 'typescript-generics-a-cheat-sheet',
  },
  {
    title: '10 Python programming optimisation techniques',
    content:
      "<p>Optimised code is essential because it directly impacts the efficiency, performance, and scalability of software. Well-written code runs faster, consumes fewer resources, and is more maintainable, making it better suited for handling larger workloads and improving user experience. It also reduces operational costs, as efficient code requires less processing power and memory, which is particularly crucial in environments with limited resources, such as embedded systems or large-scale cloud applications.</p><p><br></p><p>Poorly written code, on the other hand, can lead to slow execution times, increased energy consumption, and higher infrastructure costs. For example, in a web application, inefficient code can slow down page loads, leading to a poor user experience and potentially driving users away. In data processing tasks, inefficient algorithms can significantly increase the time it takes to process large datasets, delaying critical insights and decisions.</p><p><br></p><p>Moreover, optimised code is often more straightforward to maintain and extend. By adhering to optimisation best practices, developers can ensure that their codebase remains clean and modular, making it easier to update or scale the application as needed. This becomes increasingly important as software projects grow in complexity and as the demands on the system increase.</p><p><br></p><p>Let's explore 10 Python programming optimisation techniques that can help you write more efficient and performant code. These techniques are crucial for developing robust applications that meet performance requirements while remaining scalable and maintainable over time. These techniques can also be applied to other programming languages by following the best practices.</p><p><br></p><h3>1.&nbsp;<strong>Variable Packing</strong></h3><p><br></p><p>Variable packing minimises memory usage by grouping multiple data items into a single structure. This technique is critical in scenarios where memory access times significantly impact performance, such as in large-scale data processing. When related data is packed together, it allows for more efficient use of CPU cache, leading to faster data retrieval.</p><p><br></p><h3>2.&nbsp;<strong>Storage vs. Memory</strong></h3><p><br></p><p>Understanding the difference between storage (disk) and memory (RAM) is crucial. Memory operations are faster but volatile, while storage is persistent but slower. In performance-critical applications, keeping frequently accessed data in memory and minimising storage I/O is essential for speed.</p><p><br></p><h3>3.&nbsp;<strong>Fixed-Length vs. Variable-Length Variables</strong></h3><p><br></p><p>Fixed-length variables are stored in a contiguous block of memory, making access and manipulation faster. Variable-length variables, on the other hand, require additional overhead to manage dynamic memory allocation, which can slow down operations, particularly in real-time systems.</p><p><br></p><h3>4.&nbsp;<strong>Internal vs. Public Functions</strong></h3><p><br></p><p>Internal functions are those intended to be used only within the module where they are defined, often optimised for speed and efficiency. Public functions are exposed for external use and may include additional error handling or logging, making them slightly less efficient.</p><p><br></p><h3>5.&nbsp;<strong>Function Modifiers</strong></h3><p><br></p><p>In Python, decorators serve as function modifiers, allowing you to add functionality before or after the function's main execution. This is useful for tasks like caching, access control, or logging, which can optimise resource usage across multiple function calls.</p><p><br></p><h3>6.&nbsp;<strong>Use Libraries</strong></h3><p><br></p><p>Leveraging libraries allows you to avoid reinventing the wheel. Libraries like NumPy are written in C and built for performance, making them far more efficient for heavy numerical computations compared to pure Python implementations.</p><p><br></p><h3>7.&nbsp;<strong>Short-Circuiting Conditionals</strong></h3><p><br></p><p>Short-circuiting reduces unnecessary evaluations, which is particularly valuable in complex condition checks or when involving resource-intensive operations. It prevents execution of conditions that don't need to be checked, saving both time and computational power.</p><p><br></p><p>Since conditional checks will stop the second they find the first value which satisfies the condition, you should put the variables most likely to validate/invalidate the condition first. In OR conditions (or), try to put the variable with the highest likelihood of being true first, and in AND conditions (and), try to put the variable with the highest likelihood of being false first. As soon as that variable is checked, the conditional can exit without needing to check the other values.</p><p><br></p><h3>8.&nbsp;<strong>Free Up Memory</strong></h3><p><br></p><p>In long-running applications, especially those dealing with large datasets, it's essential to free up memory once it's no longer needed. This can be done using&nbsp;<code style=\"color: var(--color-body-color);\">del</code>,&nbsp;<code style=\"color: var(--color-body-color);\">gc.collect()</code>, or by allowing objects to go out of scope.</p><p><br></p><h3>9.&nbsp;<strong>Short Error Messages</strong></h3><p><br></p><p>In systems where memory or bandwidth is limited, such as embedded systems or logging in distributed applications, short error messages can reduce overhead. This practice also applies to scenarios where large-scale error logging is necessary.</p><p><br></p><h3>10.&nbsp;<strong>Optimize Loops</strong></h3><p><br></p><p>Loops are a common source of inefficiency, especially when processing large datasets. Optimising loops by reducing iterations, simplifying the logic, or using vectorised operations can significantly improve performance.</p>",
    author: 'editor',
    category: 'Python',
    image: 'https://www.perkins.org/wp-content/uploads/2023/11/13.png',
    slug: '10-python-programming-optimisation-techniques',
  },
  {
    title:
      'Modern API Development with Node.js, Express, and TypeScript using Clean Architecture',
    content:
      "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 23, 23);\">APIs are the backbone of modern web applications. As the complexity of applications grows, it's crucial to adopt an architecture that promotes scalability, maintainability, and testability. In this blog, we'll explore how to build a modern API using Node.js, Express, and TypeScript, all while adhering to Clean Architecture principles.</span></p><p><br></p><h2>1. 🧩 Introduction to Clean Architecture</h2><p>Clean Architecture, introduced by Robert C. Martin (Uncle Bob), emphasizes the separation of concerns within an application. It promotes the idea that the business logic should be independent of any frameworks, databases, or external systems. This makes the application more modular, easier to test, and adaptable to changes.</p><h3>Key principles of Clean Architecture:</h3><ul><li><strong>Independence:</strong>&nbsp;The core business logic should not depend on external libraries, UI, databases, or frameworks.</li><li><strong>Testability:</strong>&nbsp;The application should be easy to test without relying on external systems.</li><li><strong>Flexibility:</strong>&nbsp;It should be easy to change or replace parts of the application without affecting others.</li></ul><p><br></p><h2>2. 💡 Why Node.js, Express, and TypeScript?</h2><h3><strong>Node.js</strong></h3><p>Node.js is a powerful JavaScript runtime that allows you to build scalable network applications. It's non-blocking and event-driven, making it ideal for building APIs that handle a large number of requests.</p><h3><strong>Express</strong></h3><p>Express is a minimalistic web framework for Node.js. It provides a robust set of features for building web and mobile applications and APIs. Its simplicity makes it easy to start with, and it's highly extensible.</p><h3><strong>TypeScript</strong></h3><p>TypeScript is a superset of JavaScript that adds static types. Using TypeScript in your Node.js application helps catch errors early in the development process, improves code readability, and enhances the overall developer experience.</p><p><br></p><h2>3. 🚧 Setting Up the Project</h2><p>First, let's create a new Node.js project and set up TypeScript.</p><p><br></p><h2>4. 🏗️ Structuring the Project with Clean Architecture</h2><p>A typical Clean Architecture project is divided into the following layers:</p><ol><li><strong>Domain Layer</strong>: Contains the business logic, entities, and interfaces. This layer is independent of any other layers.</li><li><strong>Use Cases Layer</strong>: Contains the application's use cases or business rules.</li><li><strong>Infrastructure Layer</strong>: Contains implementations of the interfaces defined in the domain layer, such as database connections.</li><li><strong>Interface Layer</strong>: Contains controllers, routes, and any other web framework-related code.</li></ol><p><br></p><p><br></p><p><br></p>",
    author: 'editor',
    category: 'TypeScript',
    image:
      'https://media.dev.to/cdn-cgi/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F0ro1hmvpqn874tz5x9wz.jpg',
    slug: 'modern-api-development-with-nodejs-express-and-typescript-using-clean-architecture',
  },
  {
    title: "Top 5 HTML Features You're Not Using (But Should Be)",
    content:
      "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 23, 23);\">HTML offers a plethora of advanced features that can significantly enhance the functionality and efficiency of your web pages. Unfortunately, many of these powerful features remain underutilized. In this article, we'll explore the top 5 HTML features you're probably not using but definitely should be.</span></p><p><br></p><h2>1. Dialog Element</h2><p>The element is a native HTML element that allows you to create modal dialogs without relying on JavaScript libraries. It can be used for alerts, confirmation dialogs, or custom pop-ups, offering a more semantic approach to modals.</p><p><br></p><h2>2. Picture Element</h2><p>The element is essential for creating responsive images that adapt to different screen sizes and resolutions. It allows you to specify multiple image sources and choose the best one based on the device's capabilities.</p><p><br></p><h2>3. Output Element</h2><p>The element is designed to display the result of a calculation or user interaction. It's especially useful in forms where you want to show real-time feedback based on user input.</p><p><br></p><h2>4. Data Element</h2><p>The element associates a machine-readable value with its human-readable counterpart. It's particularly useful for adding semantic meaning to your content, like linking a product ID to its display name.</p><p><br></p><h2>5. Details and Summary Elements</h2><p>The and elements work together to create expandable content sections. This feature is perfect for creating FAQs, collapsible content, or any scenario where you want to hide and reveal information.</p><p><br></p><h2>Conclusion</h2><p>HTML has evolved significantly, and these features demonstrate just how powerful and flexible it has become. By incorporating these lesser-known elements into your projects, you can create more responsive, dynamic, and user-friendly web pages with less reliance on external libraries and frameworks. So, give these HTML features a try—you might be surprised at how much they can enhance your development process.</p>",
    author: 'admin',
    category: 'HTML',
    image:
      'https://www.oxfordwebstudio.com/user/pages/06.da-li-znate/sta-je-html/sta-je-html.jpg',
    slug: 'top-5-html-features-youre-not-using-but-should-be',
  },
  {
    title: 'How to Make a Phone Vibrate Using JavaScript',
    content:
      '<p>In this tutorial, we\'ll explore how to trigger the vibration function on a smartphone using&nbsp;<strong>JavaScript</strong>. This feature can be useful for creating more interactive and responsive web applications, particularly when targeting mobile users. Let\'s dive into the details of how this can be implemented effectively.</p><ol><li>Introduction to the Vibration API</li></ol><p>The Vibration API is a simple yet powerful feature available in modern web browsers that allows you to control the vibration functionality of a device. This API is primarily used on mobile devices, as most desktops do not have a vibration feature.</p><p>The API is straightforward and consists of a single method:&nbsp;<code style="color: var(--color-body-color);">navigator.vibrate()</code>. When this method is called, it triggers the vibration of the device for a specified duration.</p><ol><li>Basic Usage of the Vibration API</li></ol><p>The syntax of the&nbsp;<code style="color: var(--color-body-color);">vibrate()</code>&nbsp;method is as followsIn this example, clicking the button will cause the device to vibrate for 300 milliseconds.</p><p><br></p><h4>Considerations and Best Practices</h4><ul><li><strong>Battery Consumption:</strong>&nbsp;Frequent or prolonged vibrations can drain the device\'s battery quickly. Use vibrations sparingly.</li><li><strong>User Experience:</strong>&nbsp;Excessive vibrations can be annoying or distracting. Always provide users with the option to disable this feature.</li><li><strong>Accessibility:</strong>&nbsp;Keep in mind that some users may rely on vibrations as part of their accessibility settings. Ensure that your application respects these settings.</li></ul><h4>Conclusion</h4><p>The Vibration API in JavaScript is a simple yet effective way to enhance the interactivity of your web applications, especially for mobile users. Whether you\'re creating a game, building notifications, or just adding a bit of flair to your UI, the ability to trigger vibrations can significantly improve user engagement. Remember to use this feature judiciously to ensure a positive user experience.</p><p><br></p><pre class="ql-syntax" spellcheck="false">',
    author: 'admin',
    category: 'JavaScript',
    image:
      'https://media.dev.to/cdn-cgi/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fswce9s6j8yfkojimzmh5.png',
    slug: 'how-to-make-a-phone-vibrate-using-javascript',
  },
  {
    title: 'VS Code Setup - Recommended Extensions',
    content:
      '<h2>Markdown Related Extensions</h2><p>ExtensionDescription<a href="https://marketplace.visualstudio.com/items?itemName=jerriepelser.copy-markdown-as-html" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Copy Markdown as HTML</a>Converts Markdown to HTML.<a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Markdown All in One</a>A comprehensive tool with all the features you need for writing Markdown files.<a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-footnotes" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Markdown Footnotes</a>Adds [^footnote] syntax support to VS Code\'s built-in markdown preview.<a href="https://marketplace.visualstudio.com/items?itemName=telesoho.vscode-markdown-paste-image" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Markdown Paste</a>Easily paste images into Markdown with the&nbsp;<code style="color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);">Markdown Paste</code>&nbsp;command.<a href="https://marketplace.visualstudio.com/items?itemName=yzane.markdown-pdf" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Markdown PDF</a>Convert Markdown to PDF.<a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Markdown Preview Enhanced</a>An enhanced Markdown preview for VS Code.<a href="https://marketplace.visualstudio.com/items?itemName=davidanson.vscode-markdownlint" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Markdownlint</a>Linting and style checking for Markdown files.<a href="https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Paste Image</a>Easily paste images into Markdown and HTML.<a href="https://marketplace.visualstudio.com/items?itemName=unifiedjs.vscode-mdx" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">MDX</a>Language support for MDX.<a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Path IntelliSense</a>Auto-completes filenames.</p><h2>Writing (in General) Related Extensions</h2><p>ExtensionDescription<a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Code Spell Checker</a>A great spell checker for programmers, with good support for camelCase and low false positives.<a href="https://marketplace.visualstudio.com/items?itemName=viablelab.capitalize" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Capitalize</a>Capitalizes your text.<a href="https://marketplace.visualstudio.com/items?itemName=wmaurer.change-case" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Change Case</a>Easily change the case of text.<a href="https://marketplace.visualstudio.com/items?itemName=andersliu.insert-line-number" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Insert Line Number</a>Insert line numbers to selected lines or the whole document.<a href="https://marketplace.visualstudio.com/items?itemName=jianbingfang.dupchecker" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">DupChecker</a>Checks for and removes duplicate lines in the file content or selection.<a href="https://marketplace.visualstudio.com/items?itemName=bierner.emojisense" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">:emojisense:</a>Autocomplete for emoji.<a href="https://marketplace.visualstudio.com/items?itemName=jinhyuk.replace-curly-quotes" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Replace Curly Quotes</a>Replaces curly quotes (<code style="color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);"></code>,&nbsp;<code style="color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);">\'</code>,&nbsp;<code style="color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);">“</code>,&nbsp;<code style="color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);">”</code>) in a document with straight quotes (<code style="color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);">\'</code>,&nbsp;<code style="color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);">"</code>).<a href="https://marketplace.visualstudio.com/items?itemName=Tyriar.sort-lines" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Sort lines</a>Sorts lines of text.</p><h2>GitHub Related Extensions</h2><p>ExtensionDescription<a href="https://marketplace.visualstudio.com/items?itemName=bierner.github-markdown-preview" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">GitHub Markdown Preview</a>View Markdown files as they would appear on GitHub.<a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">GitHub Copilot Chat</a>AI chat features powered by GitHub Copilot.<a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">GitHub Copilot</a>AI-powered code completion tool.<a href="https://marketplace.visualstudio.com/items?itemName=wraith13.open-in-github-desktop" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Open in GitHub Desktop</a>Open the&nbsp;<a href="https://desktop.github.com/" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">GitHub Desktop App</a>&nbsp;easily from VS Code.<a href="https://marketplace.visualstudio.com/items?itemName=wengerk.highlight-bad-chars" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Highlight Bad Chars</a>Makes zenkaku spaces (double-byte whitespace) visible.<a href="https://marketplace.visualstudio.com/items?itemName=possan.nbsp-vscode" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">NBSP</a>Visualizes suspicious Unicode characters and trailing whitespaces.</p><h2>CSV Related Extensions</h2><p>ExtensionDescription<a href="https://marketplace.visualstudio.com/items?itemName=phplasma.csv-to-table" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">CSV to Table</a>Convert a CSV/TSV/PSV file to an ASCII formatted table.<a href="https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Rainbow CSV</a>Makes it easier to read and edit CSV and TSV files.</p><h2>Japanese Language Related Extensions</h2><p>ExtensionDescription<a href="https://marketplace.visualstudio.com/items?itemName=ICS.japanese-proofreading" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">テキスト校正くん</a>Extension to check Japanese sentences in text files and Markdown files in VS Code.<a href="https://marketplace.visualstudio.com/items?itemName=sifue.japanese-word-count" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Japanese Word Count</a>Count Japanese characters, words, and lines.<a href="https://marketplace.visualstudio.com/items?itemName=mosapride.zenkaku" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Zenkaku</a>Show double-byte whitespace.</p><h2>Styling and Themes Related Extensions</h2><p>ExtensionDescription<a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">TODO Highlight</a>Highlight TODOs, FIXMEs, and any other keywords or annotations.<a href="https://marketplace.visualstudio.com/items?itemName=ginfuru.ginfuru-better-solarized-dark-theme" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Better Solarized</a>A solarized theme for Visual Studio Code, including light and dark versions.<a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Material Icon Theme</a>Material Design Icons for Visual Studio Code.<a href="https://marketplace.visualstudio.com/items?itemName=danielgjackson.auto-dark-mode-windows" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Toggle Light/Dark Theme</a>Command to toggle the theme between light and dark.</p><h2>Utility Extensions</h2><p>ExtensionDescription<a href="https://marketplace.visualstudio.com/items?itemName=Google.arb-editor" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">ARB Editor</a>Editor for Application Resource Bundle files used for localization.<a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Code Runner</a>Run Python and JavaScript code locally for quick checks.<a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">ESLint</a>Integrates ESLint JavaScript into VS Code.<a href="https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">File Utils</a>A convenient way of creating, duplicating, moving, renaming, and deleting files and directories.<a href="https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">HTML Snippets</a>Full HTML tags including HTML5 snippets.<a href="https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">IntelliSense for CSS class names in HTML</a>CSS class name completion for the HTML class attribute based on the definitions found in your workspace.<a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Live Server</a>Launch a local development server with live reload feature for static &amp; dynamic pages. Perfect when working on HTML.<a href="https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-open-in-finder" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Open in Finder</a>Adds commands for opening the current file or project in Finder.<a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Prettier - Code Formatter</a>Code formatter using Prettier.<a href="https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">Trailing Spaces</a>Highlights trailing spaces and allows for a simple "delete all trailing spaces" command.<a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml" rel="noopener noreferrer" target="_blank" style="color: var(--link-branded-color);">YAML</a>YAML language support by Red Hat, with built-in Kubernetes syntax support.</p><h2>Easy Installation Method</h2><p>You can install all the recommended extensions easily by creating an&nbsp;<code style="color: var(--color-body-color);">extensions.json</code>&nbsp;file in your&nbsp;<code style="color: var(--color-body-color);">.vscode</code>&nbsp;directory and following these steps:</p><ol><li>Open the VS Code project where you want to install the recommended extensions.</li><li>Open the command palette</li></ol><ul><li class="ql-indent-1">macOS:&nbsp;<code style="color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);">Cmd+Shift+P</code></li><li class="ql-indent-1">Windows/Linux:&nbsp;<code style="color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);">Ctrl+Shift+P</code></li></ul><ol><li>Type and select&nbsp;<code style="color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);">Configure Recommended Extensions (Workspace Folder)</code>.</li><li>Copy and paste the contents of the&nbsp;<code style="color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);">extensions.json</code>&nbsp;file below into your&nbsp;<code style="color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);">extensions.json</code>&nbsp;file.</li><li>Type and select&nbsp;<code style="color: var(--color-body-color); background-color: rgba(0, 0, 0, 0.1);">Extensions: Show Recommended Extensions</code>&nbsp;in the command palette.</li></ol><p><br></p>',
    author: 'editor',
    category: 'Dev',
    image:
      'https://media.dev.to/cdn-cgi/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4w81xv7v76w53jmtz6s5.png',
    slug: 'vs-code-setup-recommended-extensions',
  },
];

export default posts;
